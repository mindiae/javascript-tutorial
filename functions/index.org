* ფუნქციები
** ფუნქციისთვის მნიშვნელობების გადაცემა არგუმენტების მეშვეობით
#+NAME: params-and-arguments
#+BEGIN_SRC js

function testFunction(param1, param2) {
  console.log(param1, param2);
}

testFunction("argument1", "argument2");

#+END_SRC

#+RESULTS: params-and-arguments
: argument1 argument2
: undefined

** ფუნქციის დაბრუნებული მნიშვნელობა return -ის გამოყენებით
#+NAME: return-value
#+BEGIN_SRC js

function greetingGenerator(firstName, lastName) {
  return "Hello, dear " + firstName + " " + lastName + "!";
}

let greeting = greetingGenerator("John", "Doe");

console.log(greeting);

#+END_SRC

#+RESULTS: return-value
: Hello, dear John Doe!
: undefined

** გლობალური და ლოკალური ფარგლები ფუნქციისთვის

#+NAME: global-scope
#+BEGIN_SRC js
let myGlobalNumber=68;
function globalVarModifier() {
  myGlobalNumber=100;
}
globalVarModifier()
console.log(myGlobalNumber);

#+END_SRC

#+RESULTS: global-scope
: 100
: undefined

#+NAME: local-scope
#+BEGIN_SRC js
// 
let myGlobalNumber=67
function localScopeTester() {
  let myGlobalNumber=100;
  console.log(myGlobalNumber);
}
localScopeTester()
console.log(myGlobalNumber);

#+END_SRC

#+RESULTS: local-scope
: 100
: 67
: undefined

** ღირებულების მინიჭება დაბრუნებული მნიშვნელობით
#+NAME: assigning-return-value
#+BEGIN_SRC js
function addToMyConst(arg1) {
  const MYCONST = 400;
  return MYCONST + arg1
}
const afterAddedConst = addToMyConst(378)
console.log(afterAddedConst);

#+END_SRC

#+RESULTS: assigning-return-value
: 778
: undefined
